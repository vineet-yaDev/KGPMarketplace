// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
enum ProductStatus {
  LISTED
  SOLD
  RENTED
}

enum ProductType {
  NEW
  USED
  RENT
  SERVICE
}

enum ProductSeasonality {
  NONE
  HALL_DAYS
  PLACEMENTS
  SEMESTER_END
  FRESHERS
  FESTIVE
}

enum KGPHalls {
  RK
  RP
  LBS
  AZAD
  HJB
  MT
  PATEL
  VS
  BCR
  SNVH
  SNIG
  ABV
  MMM
  BRH
  JCB
  GKH
  RLB
  NEHRU
  LLR
  SBP
  MS
  ZH
  GOKHALE
  VSRC
  SAM
  OTHER
}

enum ProductCategory {
  ELECTRONICS
  BOOKS
  STATIONERY
  FURNITURE
  HOUSEHOLD
  SPORTS
  CYCLE
  APPAREL
  TICKETS
  OTHER
}

enum ServiceCategory {
  ACADEMICS
  CAREERS
  COMPETITION
  FREELANCING
  DESIGN
  CODING
  VENDORS
  OTHER
}

// --- User Model (JWT Compatible) ---
model User {
  id              String    @id @default(uuid())
  name            String?   
  email           String    @unique 
  image           String?   
  mobileNumber    String?   
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isBlocked       Boolean   @default(false)
  
  // Relationships
  products        Product[]
  services        Service[]
  demands         Demand[]
  reportsMade     Report[]  @relation("ReportsMade")
  reportsAgainst  Report[]  @relation("ReportsAgainst")

  // Indexes
  @@index([email], name: "idx_user_email")
  @@index([createdAt(sort: Desc)], name: "idx_user_created_at")
  @@index([isBlocked], name: "idx_user_blocked")
}

// --- Product Model ---
model Product {
  id              String             @id @default(uuid())
  title           String             
  description     String?         
  price           Float?
  originalPrice   Float?
  productType     ProductType        @default(USED)
  status          ProductStatus      @default(LISTED)
  condition       Int                @default(3)
  ageInMonths     Float?
  addressHall     KGPHalls?
  mobileNumber    String?             
  ecommerceLink   String?            
  invoiceImageUrl String?            
  seasonality     ProductSeasonality @default(NONE)
  category        ProductCategory    @default(OTHER)
  images          String[]           
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  // Proper relation with User
  owner           User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String

  // Indexes for fuzzy search and filtering
  @@index([ownerId], name: "idx_product_owner_id")
  @@index([category], name: "idx_product_category")
  @@index([status], name: "idx_product_status")
  @@index([productType], name: "idx_product_type")
  @@index([addressHall], name: "idx_product_hall")
  @@index([createdAt(sort: Desc)], name: "idx_product_created_at")
  @@index([price], name: "idx_product_price")
  @@index([condition], name: "idx_product_condition")
  @@index([seasonality], name: "idx_product_seasonality")
  @@index([status, category], name: "idx_product_status_category")
  @@index([category, createdAt(sort: Desc)], name: "idx_product_category_date")
  @@index([price, condition], name: "idx_product_price_condition")
}

// --- Service Model ---
model Service {
  id                String          @id @default(uuid())
  title             String          
  description       String?          
  minPrice          Float?
  maxPrice          Float?
  addressHall       KGPHalls?
  portfolioUrl      String?         
  experienceYears   Float?
  mobileNumber      String?
  category          ServiceCategory @default(OTHER)
  images            String[]        
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Proper relation with User
  owner             User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String

  // Indexes for fuzzy search and filtering
  @@index([ownerId], name: "idx_service_owner_id")
  @@index([category], name: "idx_service_category")
  @@index([addressHall], name: "idx_service_hall")
  @@index([createdAt(sort: Desc)], name: "idx_service_created_at")
  @@index([minPrice], name: "idx_service_min_price")
  @@index([maxPrice], name: "idx_service_max_price")
  @@index([experienceYears], name: "idx_service_experience")
  @@index([category, createdAt(sort: Desc)], name: "idx_service_category_date")
  @@index([minPrice, maxPrice], name: "idx_service_price_range")
}

// --- Demand Model ---
model Demand {
  id                String           @id @default(uuid())
  title             String           
  description       String?           
  mobileNumber      String?
  productCategory   ProductCategory? 
  serviceCategory   ServiceCategory? 
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Proper relation with User
  owner             User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String

  // Indexes for fuzzy search and filtering
  @@index([ownerId], name: "idx_demand_owner_id")
  @@index([createdAt(sort: Desc)], name: "idx_demand_created_at")
  @@index([productCategory], name: "idx_demand_product_category")
  @@index([serviceCategory], name: "idx_demand_service_category")
}

// --- Report Model ---
model Report {
  id                String   @id @default(uuid())
  reason            String   
  createdAt         DateTime @default(now())
  
  reportedBy        User     @relation("ReportsMade", fields: [reportedById], references: [id], onDelete: Cascade)
  reportedById      String
  reportedAgainst   User     @relation("ReportsAgainst", fields: [reportedAgainstId], references: [id], onDelete: Cascade)
  reportedAgainstId String

  // Indexes for reports
  @@index([reportedById], name: "idx_report_reported_by")
  @@index([reportedAgainstId], name: "idx_report_reported_against")
  @@index([createdAt(sort: Desc)], name: "idx_report_created_at")
}

// --- Admin Model ---
model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  email     String   @unique
  role      String   @default("MODERATOR")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for admin
  @@index([username], name: "idx_admin_username")
  @@index([email], name: "idx_admin_email")
  @@index([role], name: "idx_admin_role")
}
